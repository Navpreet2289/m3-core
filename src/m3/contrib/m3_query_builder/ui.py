#coding:utf-8 
'''
Date&Time: 01.06.11 10:28
@author: kir
'''
from m3.ui.ext.all_components import *

from m3.helpers import urls
from m3.ui.ext.panels.grids import ExtMultiGroupinGrid


class QueryBuilderWindow(ExtWindow):

    def __init__(self, create_new=False, params={}, *args, **kwargs):
        super(QueryBuilderWindow, self).__init__(*args, **kwargs)
        self.initialize()
        
        #Как бы хак        
        self.button_align = ExtWindow.align_left
        
        #Добавляем элементы в таб панель
        self.tab_main.items.extend([self.init_tables_and_connections(),
                                          self.init_fields(),
                                          self.init_grouping(),
                                          self.init_conditions()])

        self.params = params
        
        # Настройка редактирования колонок для выборке полей
        self.grd_selected_fields.editor = True
        self.clmn_alias.editor = ExtStringField()
        
        combo_sort = ExtComboBox(display_field='sort', 
                                          value_field='sort',
                                          trigger_action=ExtComboBox.ALL,)
        
        combo_sort.store = ExtDataStore()                
        self.clmn_sorting.editor = combo_sort
        
        # Настройка редактирования колонок для выбора функций при группировки
        self.grd_gruop_aggr_fields.editor = True        

        self.combo_function = ExtComboBox(display_field='function', 
                                          value_field='function',
                                          trigger_action=ExtComboBox.ALL)
        
        self.combo_function.editable = False
        self.clmn_aggr_function.editor = self.combo_function        

    def set_data_to_store_combo_sort(self, data):
        '''
        Устанавливает данные для комбобокса сортировки
        '''
        assert isinstance(self.clmn_sorting.editor, ExtComboBox)
        assert isinstance(self.clmn_sorting.editor.store, ExtDataStore)
        self.clmn_sorting.editor.store.data = data

    def initialize(self):
        '''AUTOGENERATED'''
        self.min_width = 800
        self.layout = 'border'
        self.title = u'Редактор запросов'
        self.min_height = 600
        self.height = 600
        self.button_align = 'left'
        self.width = 800
        self.maximizable = True
        self.template_globals = 'qb-window.js'
        self.minimizable = True
        
        tb_main_tabpanel = ExtToolBar()
        tb_main_tabpanel.region = 'south'
        tb_main_tabpanel.layout = 'toolbar'
        
        btn_query_text = ExtButton()
        btn_query_text.text = u'Показать текст запроса'
        btn_query_text.icon_cls = 'icon-script-code'
        btn_query_text.handler = 'showQueryText'
        
        tbfill_tab = ExtToolBar.Fill()
        
        btn_run_query = ExtButton()
        btn_run_query.disabled = True
        btn_run_query.text = u'Выполнить'
        btn_run_query.icon_cls = 'icon-script-lightning'
        
        btn_save_query = ExtButton()
        btn_save_query.text = u'Сохранить'
        btn_save_query.icon_cls = 'icon-script-save'
        btn_save_query.handler = 'saveQuery'
        
        btn_close = ExtButton()
        btn_close.text = u'Закрыть'
        btn_close.icon_cls = 'icon-door-out'
        btn_close.handler = 'winClose'
        
        cnt_name_and_id = ExtContainer()
        cnt_name_and_id.label_width = 120
        cnt_name_and_id.region = 'north'
        cnt_name_and_id.height = 55
        cnt_name_and_id.layout = 'form'
        cnt_name_and_id.style = {'padding': '5px'}
        
        hdn_id = ExtHiddenField()
        hdn_id.name = 'id'
        
        str_name = ExtStringField()
        str_name.label = u'Название'
        str_name.allow_blank = False
        str_name.max_length = 100
        str_name.anchor = '100%'
        
        chk_use_dict_result = ExtCheckBox()
        chk_use_dict_result.label = u'Получать объект'
        
        cnt_tab_panel = ExtContainer()
        cnt_tab_panel.region = 'center'
        cnt_tab_panel.layout = 'fit'
        
        tab_main = ExtTabPanel()
        tab_main.header = True
        tab_main.region = 'center'
        tab_main.title = 'New panel'
        
        self.footer_bar = tb_main_tabpanel
        
        tb_main_tabpanel.items.extend([btn_query_text, tbfill_tab, btn_run_query, btn_save_query, btn_close])
        cnt_name_and_id.items.extend([hdn_id, str_name, chk_use_dict_result])
        cnt_tab_panel.items.extend([tab_main])
        self.items.extend([cnt_name_and_id, cnt_tab_panel])
        
        self.tb_main_tabpanel = tb_main_tabpanel
        self.btn_query_text = btn_query_text
        self.tbfill_tab = tbfill_tab
        self.btn_run_query = btn_run_query
        self.btn_save_query = btn_save_query
        self.btn_close = btn_close
        self.cnt_name_and_id = cnt_name_and_id
        self.hdn_id = hdn_id
        self.str_name = str_name
        self.chk_use_dict_result = chk_use_dict_result
        self.cnt_tab_panel = cnt_tab_panel
        self.tab_main = tab_main

                                                                                                        
    def init_tables_and_connections(self, container_class=ExtPanel):
        cont = container_class()
        cont.layout = 'border'
        cont.title = u'Сущности и связи'
        
        cnt_entities = ExtContainer()
        cnt_entities.region = 'center'
        cnt_entities.layout = 'border'
        
        grd_selected_entities = ExtGrid()
        grd_selected_entities.drag_drop = True
        grd_selected_entities.layout = 'auto'
        grd_selected_entities.title = u'Выбранные сущности'
        grd_selected_entities.region = 'north'
        grd_selected_entities.drag_drop_group = 'selectedEntities'
        grd_selected_entities.height = 200
        grd_selected_entities.header = True
        
        tb_selected_entities = ExtToolBar()
        tb_selected_entities.layout = 'toolbar'
        
        btn_add_entity = ExtButton()
        btn_add_entity.text = u'Добавить'
        btn_add_entity.icon_cls = 'add_item'
        btn_add_entity.handler = 'onAddEntity'
        
        btn_delete_entity = ExtButton()
        btn_delete_entity.text = u'Удалить'
        btn_delete_entity.icon_cls = 'delete_item'
        btn_delete_entity.handler = 'deleteEntity'
        
        store_selected_entities = ExtDataStore()
        
        entity_name = ExtGridColumn()
        entity_name.header = u'Наименование'
        entity_name.data_index = 'entityName'
        entity_name.menu_disabled = True
        
        grd_links = ExtGrid()
        grd_links.layout = 'auto'
        grd_links.title = u'Связи между выбранными сущностями'
        grd_links.region = 'center'
        grd_links.header = True
        
        tb_link_entities = ExtToolBar()
        tb_link_entities.layout = 'toolbar'
        
        btn_select_link = ExtButton()
        btn_select_link.text = u'Выбрать связь'
        btn_select_link.icon_cls = 'icon-link-add'
        btn_select_link.handler = 'selectConnection'
        
        btn_delete_link = ExtButton()
        btn_delete_link.name = 'deleteConnection'
        btn_delete_link.text = u'Удалить связь'
        btn_delete_link.handler = 'deleteConnection'
        btn_delete_link.icon_cls = 'icon-link-delete'
        grd_links.layout_config = {'forceFit': True}
        
        dstore_links = ExtDataStore()
        
        clmn_entity_first_type = ExtGridColumn()
        clmn_entity_first_type.menu_disabled = True
        clmn_entity_first_type.header = u'Левое внешнее соединение'
        clmn_entity_first_type.width = 20
        clmn_entity_first_type.data_index = 'outerFirst'
        
        clmn_descr = ExtGridColumn()
        clmn_descr.header = u'Наименование связи'
        clmn_descr.data_index = 'value'
        clmn_descr.menu_disabled = True
        
        clmn_entity_second_type = ExtGridColumn()
        clmn_entity_second_type.menu_disabled = True
        clmn_entity_second_type.header = u'Правое внешнее соединение'
        clmn_entity_second_type.width = 20
        clmn_entity_second_type.data_index = 'outerSecond'
        
        tree_entities = ExtTree()
        tree_entities.title = u'Дерево сущностей'
        tree_entities.url = urls.get_action('m3-query-builder-entities-list').absolute_url()
        tree_entities.drag_drop = True
        tree_entities.drag_drop_group = 'TreeDD'
        tree_entities.header = True
        tree_entities.width = 250
        tree_entities.region = 'west'
        
        tb_entities = ExtToolBar()
        tb_entities.layout = 'toolbar'
        
        btn_button_5 = ExtButton()
        btn_button_5.text = u'Обновить'
        btn_button_5.icon_cls = 'icon-arrow-refresh'
        btn_button_5.handler = 'refreshEntities'
        
        clmn_entities = ExtGridColumn()
        clmn_entities.header = u'Схемы'
        clmn_entities.data_index = 'schemes'
        clmn_entities.menu_disabled = True
        
        grd_selected_entities.top_bar = tb_selected_entities
        grd_selected_entities.store = store_selected_entities
        grd_links.top_bar = tb_link_entities
        grd_links.store = dstore_links
        tree_entities.top_bar = tb_entities
        
        tb_selected_entities.items.extend([btn_add_entity, btn_delete_entity])
        grd_selected_entities.columns.extend([entity_name])
        tb_link_entities.items.extend([btn_select_link, btn_delete_link])
        grd_links.columns.extend([clmn_entity_first_type, clmn_descr, clmn_entity_second_type])
        cnt_entities.items.extend([grd_selected_entities, grd_links])
        tb_entities.items.extend([btn_button_5])
        tree_entities.columns.extend([clmn_entities])
        cont.items.extend([cnt_entities, tree_entities])
        
        self.cnt_entities = cnt_entities
        self.grd_selected_entities = grd_selected_entities
        self.tb_selected_entities = tb_selected_entities
        self.btn_add_entity = btn_add_entity
        self.btn_delete_entity = btn_delete_entity
        self.store_selected_entities = store_selected_entities
        self.entity_name = entity_name
        self.grd_links = grd_links
        self.tb_link_entities = tb_link_entities
        self.btn_select_link = btn_select_link
        self.btn_delete_link = btn_delete_link
        self.dstore_links = dstore_links
        self.clmn_entity_first_type = clmn_entity_first_type
        self.clmn_descr = clmn_descr
        self.clmn_entity_second_type = clmn_entity_second_type
        self.tree_entities = tree_entities
        self.tb_entities = tb_entities
        self.btn_button_5 = btn_button_5
        self.clmn_entities = clmn_entities
        
        return cont

                                                                                                                                                                                                                                                                                                                
    def init_fields(self, container_class=ExtPanel):
        cont = container_class()
        cont.layout = 'border'
        cont.title = u'Поля'
        cont.padding = '10px'
        
        pnl_panel_2 = ExtPanel()
        pnl_panel_2.layout = 'auto'
        pnl_panel_2.title = u'Опции'
        pnl_panel_2.region = 'north'
        pnl_panel_2.height = 80
        pnl_panel_2.padding = '5px'
        pnl_panel_2.header = True
        
        chk_distinct = ExtCheckBox()
        chk_distinct.box_label = u'Различные'
        
        cnt_limit = ExtContainer()
        cnt_limit.layout = 'hbox'
        
        chk_limit = ExtCheckBox()
        chk_limit.width = 150
        chk_limit.box_label = u'Количество записей'
        
        nmbr_limit_count = ExtNumberField()
        
        tree_all_fields = ExtTree()
        tree_all_fields.layout = 'auto'
        tree_all_fields.enable_drag = True
        tree_all_fields.region = 'west'
        tree_all_fields.drag_drop_group = 'TreeDD'
        tree_all_fields.root_text = 'Root'
        tree_all_fields.width = 250
        
        clmn_fields_entities = ExtGridColumn()
        clmn_fields_entities.header = u'Схемы'
        clmn_fields_entities.data_index = 'verbose_field'
        clmn_fields_entities.menu_disabled = True
        
        grd_selected_fields = ExtGrid()
        grd_selected_fields.layout = 'auto'
        grd_selected_fields.region = 'center'
        
        tb_selected_fields = ExtToolBar()
        tb_selected_fields.layout = 'toolbar'
        
        btn_button_4 = ExtButton()
        btn_button_4.text = u'Добавить'
        btn_button_4.icon_cls = 'add_item'
        btn_button_4.handler = 'addSelectField'
        
        btn_button_3 = ExtButton()
        btn_button_3.text = u'Удалить'
        btn_button_3.icon_cls = 'delete_item'
        btn_button_3.handler = 'deleteSelectField'
        
        tbsep_toolbarseparator_1 = ExtToolBar.Separator()
        
        btn_up_field = ExtButton()
        btn_up_field.text = u'Вверх'
        btn_up_field.icon_cls = 'icon-arrow-up'
        btn_up_field.handler = 'fieldUp'
        
        btn_down_field = ExtButton()
        btn_down_field.text = u'Вниз'
        btn_down_field.icon_cls = 'icon-arrow-down'
        btn_down_field.handler = 'fieldDown'
        
        astore_selected_fields = ExtDataStore()
        astore_selected_fields.store_id = 'newArrayStore'
        
        clmn_selected_field = ExtGridColumn()
        clmn_selected_field.header = u'Выбранное поле'
        clmn_selected_field.data_index = 'fieldName'
        clmn_selected_field.menu_disabled = True
        
        clmn_alias = ExtGridColumn()
        clmn_alias.menu_disabled = True
        clmn_alias.header = u'Алиас'
        clmn_alias.data_index = 'alias'
        clmn_alias.hidden = True
        
        clmn_sorting = ExtGridColumn()
        clmn_sorting.menu_disabled = True
        clmn_sorting.header = u'Сортировка'
        clmn_sorting.width = 80
        clmn_sorting.data_index = 'sorting'
        
        grd_selected_fields.top_bar = tb_selected_fields
        grd_selected_fields.store = astore_selected_fields
        
        cnt_limit.items.extend([chk_limit, nmbr_limit_count])
        pnl_panel_2.items.extend([chk_distinct, cnt_limit])
        tree_all_fields.columns.extend([clmn_fields_entities])
        tb_selected_fields.items.extend([btn_button_4, btn_button_3, tbsep_toolbarseparator_1, btn_up_field, btn_down_field])
        grd_selected_fields.columns.extend([clmn_selected_field, clmn_alias, clmn_sorting])
        cont.items.extend([pnl_panel_2, tree_all_fields, grd_selected_fields])
        
        self.pnl_panel_2 = pnl_panel_2
        self.chk_distinct = chk_distinct
        self.cnt_limit = cnt_limit
        self.chk_limit = chk_limit
        self.nmbr_limit_count = nmbr_limit_count
        self.tree_all_fields = tree_all_fields
        self.clmn_fields_entities = clmn_fields_entities
        self.grd_selected_fields = grd_selected_fields
        self.tb_selected_fields = tb_selected_fields
        self.btn_button_4 = btn_button_4
        self.btn_button_3 = btn_button_3
        self.tbsep_toolbarseparator_1 = tbsep_toolbarseparator_1
        self.btn_up_field = btn_up_field
        self.btn_down_field = btn_down_field
        self.astore_selected_fields = astore_selected_fields
        self.clmn_selected_field = clmn_selected_field
        self.clmn_alias = clmn_alias
        self.clmn_sorting = clmn_sorting
        
        return cont

                                                                                                                                                                                                                                                                                                                                
    def init_grouping(self, container_class=ExtPanel):
        cont = container_class()
        cont.layout = 'border'
        cont.title = u'Группировка'
        
        tree_groups_fields = ExtTree()
        tree_groups_fields.layout = 'auto'
        tree_groups_fields.enable_drag = True
        tree_groups_fields.title = u'Поля'
        tree_groups_fields.region = 'west'
        tree_groups_fields.root_text = 'Root'
        tree_groups_fields.width = 250
        
        clmn_group_fields = ExtGridColumn()
        clmn_group_fields.header = u'Поля'
        clmn_group_fields.data_index = 'verbose_field'
        clmn_group_fields.menu_disabled = True
        
        cnt_group = ExtContainer()
        cnt_group.region = 'center'
        cnt_group.layout = 'border'
        
        grd_group_fields = ExtGrid()
        grd_group_fields.layout = 'auto'
        grd_group_fields.title = u'Групповые поля'
        grd_group_fields.region = 'north'
        grd_group_fields.height = 250
        grd_group_fields.header = True
        
        tb_group = ExtToolBar()
        tb_group.layout = 'toolbar'
        
        btn_add_group_field = ExtButton()
        btn_add_group_field.text = u'Добавить'
        btn_add_group_field.icon_cls = 'add_item'
        btn_add_group_field.handler = 'addGroupField'
        
        btn_del_group_field = ExtButton()
        btn_del_group_field.text = u'Удалить'
        btn_del_group_field.icon_cls = 'delete_item'
        btn_del_group_field.handler = 'deleteGroupField'
        
        astore_group = ExtDataStore()
        
        clmn_group_name = ExtGridColumn()
        clmn_group_name.header = u'Наименование'
        clmn_group_name.data_index = 'fieldName'
        clmn_group_name.menu_disabled = True
        
        grd_gruop_aggr_fields = ExtGrid()
        grd_gruop_aggr_fields.layout = 'auto'
        grd_gruop_aggr_fields.title = u'Агрегируемые поля'
        grd_gruop_aggr_fields.region = 'center'
        grd_gruop_aggr_fields.header = True
        
        tb_group_aggr = ExtToolBar()
        tb_group_aggr.layout = 'toolbar'
        
        btn_add_aggr_field = ExtButton()
        btn_add_aggr_field.text = u'Добавить'
        btn_add_aggr_field.icon_cls = 'add_item'
        btn_add_aggr_field.handler = 'addGroupAggrField'
        
        btn_del_aggr_field = ExtButton()
        btn_del_aggr_field.text = u'Удалить'
        btn_del_aggr_field.icon_cls = 'delete_item'
        btn_del_aggr_field.handler = 'deleteGroupAggrField'
        
        astore_group_aggr = ExtDataStore()
        
        clmn_aggr_name = ExtGridColumn()
        clmn_aggr_name.header = u'Агрегируемое поле'
        clmn_aggr_name.data_index = 'fieldName'
        clmn_aggr_name.menu_disabled = True
        
        clmn_aggr_function = ExtGridColumn()
        clmn_aggr_function.header = u'Функция'
        clmn_aggr_function.data_index = 'function'
        clmn_aggr_function.menu_disabled = True
        
        grd_group_fields.top_bar = tb_group
        grd_group_fields.store = astore_group
        grd_gruop_aggr_fields.top_bar = tb_group_aggr
        grd_gruop_aggr_fields.store = astore_group_aggr
        
        tree_groups_fields.columns.extend([clmn_group_fields])
        tb_group.items.extend([btn_add_group_field, btn_del_group_field])
        grd_group_fields.columns.extend([clmn_group_name])
        tb_group_aggr.items.extend([btn_add_aggr_field, btn_del_aggr_field])
        grd_gruop_aggr_fields.columns.extend([clmn_aggr_name, clmn_aggr_function])
        cnt_group.items.extend([grd_group_fields, grd_gruop_aggr_fields])
        cont.items.extend([tree_groups_fields, cnt_group])
        
        self.tree_groups_fields = tree_groups_fields
        self.clmn_group_fields = clmn_group_fields
        self.cnt_group = cnt_group
        self.grd_group_fields = grd_group_fields
        self.tb_group = tb_group
        self.btn_add_group_field = btn_add_group_field
        self.btn_del_group_field = btn_del_group_field
        self.astore_group = astore_group
        self.clmn_group_name = clmn_group_name
        self.grd_gruop_aggr_fields = grd_gruop_aggr_fields
        self.tb_group_aggr = tb_group_aggr
        self.btn_add_aggr_field = btn_add_aggr_field
        self.btn_del_aggr_field = btn_del_aggr_field
        self.astore_group_aggr = astore_group_aggr
        self.clmn_aggr_name = clmn_aggr_name
        self.clmn_aggr_function = clmn_aggr_function
        
        return cont

                                                                                                                                                                                                                                                
    def init_conditions(self, container_class=ExtPanel):
        cont = container_class()
        cont.layout = 'border'
        cont.title = u'Условия'
        
        tree_conditions_fields = ExtTree()
        tree_conditions_fields.layout = 'auto'
        tree_conditions_fields.enable_drag = True
        tree_conditions_fields.title = u'Все поля'
        tree_conditions_fields.region = 'west'
        tree_conditions_fields.root_text = 'Root'
        tree_conditions_fields.header = True
        tree_conditions_fields.width = 250
        
        clmn_cond_fields_entities = ExtGridColumn()
        clmn_cond_fields_entities.header = u'Поля'
        clmn_cond_fields_entities.data_index = 'verbose_field'
        clmn_cond_fields_entities.menu_disabled = True
        
        grd_conditions = ExtGrid()
        grd_conditions.layout = 'auto'
        grd_conditions.title = u'Условия'
        grd_conditions.region = 'center'
        grd_conditions.header = True
        
        tb_cond = ExtToolBar()
        tb_cond.layout = 'toolbar'
        
        btn_add_condition = ExtButton()
        btn_add_condition.text = u'Добавить'
        btn_add_condition.icon_cls = 'add_item'
        btn_add_condition.handler = 'addCondition'
        
        btn_del_condition = ExtButton()
        btn_del_condition.text = u'Удалить'
        btn_del_condition.icon_cls = 'delete_item'
        btn_del_condition.handler = 'deleteCondition'
        
        astore_cond = ExtDataStore()
        astore_cond.store_id = 'newArrayStore'
        
        clmn_cond_field = ExtGridColumn()
        clmn_cond_field.header = u'Поле'
        clmn_cond_field.menu_disabled = True
        clmn_cond_field.data_index = 'verboseName'
        clmn_cond_field.hidden = True
        
        clmn_cond_condition = ExtGridColumn()
        clmn_cond_condition.header = u'Условие'
        clmn_cond_condition.menu_disabled = True
        clmn_cond_condition.data_index = 'condition'
        clmn_cond_condition.hidden = True
        
        clmn_cond_param = ExtGridColumn()
        clmn_cond_param.header = u'Параметр'
        clmn_cond_param.menu_disabled = True
        clmn_cond_param.data_index = 'parameter'
        clmn_cond_param.hidden = True
        
        clmn_cond_expressions = ExtGridColumn()
        clmn_cond_expressions.header = u'Выражение'
        clmn_cond_expressions.data_index = 'expression'
        clmn_cond_expressions.menu_disabled = True
        
        grd_conditions.top_bar = tb_cond
        grd_conditions.store = astore_cond
        
        tree_conditions_fields.columns.extend([clmn_cond_fields_entities])
        tb_cond.items.extend([btn_add_condition, btn_del_condition])
        grd_conditions.columns.extend([clmn_cond_field, clmn_cond_condition, clmn_cond_param, clmn_cond_expressions])
        cont.items.extend([tree_conditions_fields, grd_conditions])
        
        self.tree_conditions_fields = tree_conditions_fields
        self.clmn_cond_fields_entities = clmn_cond_fields_entities
        self.grd_conditions = grd_conditions
        self.tb_cond = tb_cond
        self.btn_add_condition = btn_add_condition
        self.btn_del_condition = btn_del_condition
        self.astore_cond = astore_cond
        self.clmn_cond_field = clmn_cond_field
        self.clmn_cond_condition = clmn_cond_condition
        self.clmn_cond_param = clmn_cond_param
        self.clmn_cond_expressions = clmn_cond_expressions
        
        return cont

                
    def set_aggr_functions(self, aggr_functions):
        '''
        Устанавливает возможные функции агригирования
        '''
        self.combo_function.store = ExtDataStore (
                [[k, k] for k, _ in aggr_functions.items()] )                
                                                                      
    
    def configure_window(self, 
                         id, 
                         name,
                         use_dict_result, 
                         
                         selected_entities,
                         links, 
                         
                         distinct,
                         limit,
                         selected_fields, 
                         
                         group_fields, 
                         aggr_fields, 
                         
                         conditions):
        '''
        Конфигурирование окна, для редактирования запроса
        '''
        self.hdn_id.value = id
        self.chk_use_dict_result.checked = use_dict_result
        self.str_name.value = name
                                            
        self.grd_selected_entities.store.data = selected_entities
        self.grd_links.store.data = links
        
        self.chk_distinct.checked = distinct
        if limit > 0:
            self.chk_limit.checked = True
            self.nmbr_limit_count.value = limit
        self.grd_selected_fields.store.data = selected_fields
        
        self.grd_group_fields.store.data = group_fields
        self.grd_gruop_aggr_fields.store.data = aggr_fields
        
        self.grd_conditions.store.data = conditions                                                        
                                                                              
class SelectConnectionsWindow(ExtWindow):

    def __init__(self, *args, **kwargs):
        super(SelectConnectionsWindow, self).__init__(*args, **kwargs)
        self.initialize()

    def initialize(self):
        '''AUTOGENERATED'''
        self.layout = 'border'
        self.title = u'Выбранные схемы'
        self.min_height = 300
        self.height = 450
        self.min_width = 400
        self.width = 550
        self.modal = True
        self.template_globals = 'qb-connection-window.js'
        
        tb_buttons = ExtToolBar()
        tb_buttons.layout = 'toolbar'
        
        btn_select = ExtButton()
        btn_select.text = u'Выбрать'
        btn_select.handler = 'selectLinks'
        
        btn_cancel = ExtButton()
        btn_cancel.text = u'Отмена'
        btn_cancel.handler = 'function(){ win.close() }'
        
        cnt_main = ExtContainer()
        cnt_main.layout = 'hbox'
        cnt_main.region = 'center'
        cnt_main.height = 200
        cnt_main.layout_config = {'align': 'stretch'}
        
        tree_entities_fields_first = ExtTree()
        tree_entities_fields_first.flex = '1'
        tree_entities_fields_first.layout = 'auto'
        tree_entities_fields_first.root_text = 'Root'
        
        clmn_fields_entities_first = ExtGridColumn()
        clmn_fields_entities_first.header = u'Схема'
        clmn_fields_entities_first.data_index = 'verbose_field'
        clmn_fields_entities_first.menu_disabled = True
        
        tree_entities_fields_second = ExtTree()
        tree_entities_fields_second.flex = '1'
        tree_entities_fields_second.layout = 'auto'
        tree_entities_fields_second.root_text = 'Root'
        
        clmn_fields_entities_second = ExtGridColumn()
        clmn_fields_entities_second.header = u'Схема'
        clmn_fields_entities_second.data_index = 'verbose_field'
        clmn_fields_entities_second.menu_disabled = True
        
        cnt_south = ExtContainer()
        cnt_south.layout = 'hbox'
        cnt_south.region = 'south'
        cnt_south.height = 35
        cnt_south.style = {'padding': '5px'}
        
        chk_link_first = ExtCheckBox()
        chk_link_first.flex = 1
        chk_link_first.box_label = u'Внешняя связь'
        
        chk_link_second = ExtCheckBox()
        chk_link_second.flex = 1
        chk_link_second.box_label = u'Внешняя связь'
        
        self.footer_bar = tb_buttons
        
        tb_buttons.items.extend([btn_select, btn_cancel])
        tree_entities_fields_first.columns.extend([clmn_fields_entities_first])
        tree_entities_fields_second.columns.extend([clmn_fields_entities_second])
        cnt_main.items.extend([tree_entities_fields_first, tree_entities_fields_second])
        cnt_south.items.extend([chk_link_first, chk_link_second])
        self.items.extend([cnt_main, cnt_south])
        
        self.tb_buttons = tb_buttons
        self.btn_select = btn_select
        self.btn_cancel = btn_cancel
        self.cnt_main = cnt_main
        self.tree_entities_fields_first = tree_entities_fields_first
        self.clmn_fields_entities_first = clmn_fields_entities_first
        self.tree_entities_fields_second = tree_entities_fields_second
        self.clmn_fields_entities_second = clmn_fields_entities_second
        self.cnt_south = cnt_south
        self.chk_link_first = chk_link_first
        self.chk_link_second = chk_link_second

        
class ConditionWindow(ExtWindow):

    def __init__(self, *args, **kwargs):
        super(ConditionWindow, self).__init__(*args, **kwargs)
        self.initialize()        
        
        # Дизайнер не сабмитит False значения
        self.cmb_simple_cond.editable = False            

    def initialize(self):
        '''AUTOGENERATED'''
        self.layout = 'auto'
        self.title = u'Добавление условия'
        self.min_height = 150
        self.height = 150
        self.min_width = 500
        self.width = 500
        self.template_globals = 'qb-add-condition-window.js'
        
        tb_buttons = ExtToolBar()
        tb_buttons.layout = 'toolbar'
        
        btn_select = ExtButton()
        btn_select.text = u'Выбрать'
        btn_select.handler = 'selectCondition'
        
        btn_cancel = ExtButton()
        btn_cancel.text = u'Отмена'
        btn_cancel.handler = 'function(){ win.close() }'
        
        cnt_simple_cond = ExtContainer()
        cnt_simple_cond.layout = 'hbox'
        cnt_simple_cond.style = {'padding': '5px'}
        
        cnt_item = ExtContainer()
        cnt_item.flex = 1
        cnt_item.layout = 'form'
        cnt_item.label_align = 'top'
        cnt_item.style = {'padding': '5px'}
        
        str_item = ExtStringField()
        str_item.read_only = True
        str_item.label = u'Поле'
        str_item.anchor = '100%'
        
        cnt_simple_cmb = ExtContainer()
        cnt_simple_cmb.flex = 1
        cnt_simple_cmb.layout = 'form'
        cnt_simple_cmb.label_align = 'top'
        cnt_simple_cmb.style = {'padding': '5px'}
        
        cmb_simple_cond = ExtComboBox()
        cmb_simple_cond.display_field = 'name'
        cmb_simple_cond.label = u'Условие'
        cmb_simple_cond.value_field = 'id'
        cmb_simple_cond.mode = 'local'
        cmb_simple_cond.trigger_action = 'all'
        cmb_simple_cond.anchor = '100%'
        
        astore_conditions = ExtDataStore()
        astore_conditions.store_id = 'newArrayStore'
        
        cnt_param = ExtContainer()
        cnt_param.flex = 1
        cnt_param.layout = 'form'
        cnt_param.label_align = 'top'
        cnt_param.style = {'padding': '5px'}
        
        str_param = ExtStringField()
        str_param.label = u'Параметр'
        str_param.anchor = '100%'
        str_param.disabled = False
        str_param.read_only = True
        
        self.footer_bar = tb_buttons
        cmb_simple_cond.store = astore_conditions
        
        tb_buttons.items.extend([btn_select, btn_cancel])
        cnt_item.items.extend([str_item])
        cnt_simple_cmb.items.extend([cmb_simple_cond])
        cnt_param.items.extend([str_param])
        cnt_simple_cond.items.extend([cnt_item, cnt_simple_cmb, cnt_param])
        self.items.extend([cnt_simple_cond])
        
        self.tb_buttons = tb_buttons
        self.btn_select = btn_select
        self.btn_cancel = btn_cancel
        self.cnt_simple_cond = cnt_simple_cond
        self.cnt_item = cnt_item
        self.str_item = str_item
        self.cnt_simple_cmb = cnt_simple_cmb
        self.cmb_simple_cond = cmb_simple_cond
        self.astore_conditions = astore_conditions
        self.cnt_param = cnt_param
        self.str_param = str_param

                                                
    def set_conditions(self, conditions):
        '''
        Устанавливает возможные простые условия
        '''
        self.astore_conditions.data = [[k,v] for k,v in conditions.items()]
        self.cmb_simple_cond.value = conditions.get('eq')            


class ReportBuilderWindow(ExtEditWindow):

    def __init__(self, params, create_new=False, *args, **kwargs):
        super(ReportBuilderWindow, self).__init__(*args, **kwargs)
        self.initialize()
                
        self.params = params
        
        # Для обратной совместимости
        self.form = self.frm_form

        self.grd_params.handler_dblclick = 'editParamWindow'

    def initialize(self):
        '''AUTOGENERATED'''
        self.layout = 'border'
        self.title = u'Формирование отчета'
        self.min_height = 300
        self.height = 350
        self.min_width = 400
        self.width = 500
        self.template_globals = 'rb-edit-window.js'
        
        tb_buttons = ExtToolBar()
        tb_buttons.layout = 'toolbar'
        
        btn_button_1 = ExtButton()
        btn_button_1.text = u'Сохранить'
        btn_button_1.handler = 'submitForm'
        
        btn_button_2 = ExtButton()
        btn_button_2.text = u'Отмена'
        btn_button_2.handler = 'cancelForm'
        
        grd_params = ExtGrid()
        grd_params.layout = 'auto'
        grd_params.title = u'Параметры запроса'
        grd_params.region = 'center'
        grd_params.base_cls = 'x-panel'
        grd_params.header = True
        
        tb_form = ExtToolBar()
        tb_form.layout = 'toolbar'
        
        btn_button_3 = ExtButton()
        btn_button_3.text = u'Редактировать параметр'
        btn_button_3.icon_cls = 'icon-cog-edit'
        btn_button_3.handler = 'editParamWindow'
        
        astore_params = ExtDataStore()
        astore_params.store_id = 'newArrayStore'
        astore_params.id_index = 0
        
        clmn_name = ExtGridColumn()
        clmn_name.menu_disabled = True
        clmn_name.header = u'Идентификатор'
        clmn_name.data_index = 'name'
        clmn_name.hidden = True
        
        clmn_verbose_name = ExtGridColumn()
        clmn_verbose_name.header = u'Название'
        clmn_verbose_name.data_index = 'verbose_name'
        clmn_verbose_name.menu_disabled = True
        
        clmn_type_id = ExtGridColumn()
        clmn_type_id.header = 'clmn_type_id'
        clmn_type_id.menu_disabled = True
        clmn_type_id.data_index = 'type_id'
        clmn_type_id.hidden = True
        
        clmn_type = ExtGridColumn()
        clmn_type.width = 40
        clmn_type.header = u'Тип'
        clmn_type.data_index = 'type'
        clmn_type.menu_disabled = True
        
        clmn_value_type = ExtGridColumn()
        clmn_value_type.header = u'Значение параметра'
        clmn_value_type.data_index = 'value_type'
        clmn_value_type.menu_disabled = True
        
        clmn_condition = ExtGridColumn()
        clmn_condition.width = 50
        clmn_condition.header = u'Условие'
        clmn_condition.data_index = 'condition'
        clmn_condition.menu_disabled = True
        
        frm_form = ExtForm()
        frm_form.layout = 'form'
        frm_form.url = urls.get_action('m3-report-builder-query-save').absolute_url()
        frm_form.base_cls = 'x-plain'
        frm_form.height = 60
        frm_form.padding = '5'
        frm_form.header = True
        frm_form.region = 'north'
        
        hdn_id = ExtHiddenField()
        hdn_id.name = 'id'
        
        str_name = ExtStringField()
        str_name.label = u'Название'
        str_name.allow_blank = False
        str_name.anchor = '100%'
        str_name.name = 'name'
        
        dsf_query = ExtDictSelectField()
        dsf_query.display_field = 'name'
        dsf_query.label = u'Запрос'
        dsf_query.name = 'query_id'
        dsf_query.editable = True
        dsf_query.value_field = 'id'
        dsf_query.mode = 'local'
        dsf_query.trigger_action = 'all'
        dsf_query.anchor = '100%'
        dsf_query.allow_blank = False
        
        self.footer_bar = tb_buttons
        grd_params.top_bar = tb_form
        grd_params.store = astore_params
        
        tb_buttons.items.extend([btn_button_1, btn_button_2])
        tb_form.items.extend([btn_button_3])
        grd_params.columns.extend([clmn_name, clmn_verbose_name, clmn_type_id, clmn_type, clmn_value_type, clmn_condition])
        frm_form.items.extend([hdn_id, str_name, dsf_query])
        self.items.extend([grd_params, frm_form])
        
        self.tb_buttons = tb_buttons
        self.btn_button_1 = btn_button_1
        self.btn_button_2 = btn_button_2
        self.grd_params = grd_params
        self.tb_form = tb_form
        self.btn_button_3 = btn_button_3
        self.astore_params = astore_params
        self.clmn_name = clmn_name
        self.clmn_verbose_name = clmn_verbose_name
        self.clmn_type_id = clmn_type_id
        self.clmn_type = clmn_type
        self.clmn_value_type = clmn_value_type
        self.clmn_condition = clmn_condition
        self.frm_form = frm_form
        self.hdn_id = hdn_id
        self.str_name = str_name
        self.dsf_query = dsf_query

                                                                                                                                        
class ReportParamsWindow(ExtWindow):

    def __init__(self, types, default_type_value, params, *args, **kwargs):
        super(ReportParamsWindow, self).__init__(*args, **kwargs)
        self.initialize()
                
        # Заполнение стора
        self.astore_type.data = types
        self.cmb_type.value = default_type_value
        
        self.params = params

    def initialize(self):
        '''AUTOGENERATED'''
        self.layout = 'fit'
        self.resizable = False
        self.title = u'Редактирование параметра'
        self.body_border = False
        self.height = 170
        self.template_globals = 'rb-edit-window-param.js'
        
        tb_buttons = ExtToolBar()
        tb_buttons.layout = 'toolbar'
        
        btn_ok = ExtButton()
        btn_ok.text = 'OK'
        btn_ok.handler = 'selectType'
        
        btn_cancel = ExtButton()
        btn_cancel.text = u'Отмена'
        btn_cancel.handler = 'function(){ win.close() }'
        
        frm_form = ExtForm()
        frm_form.layout = 'form'
        frm_form.base_cls = 'x-plain'
        frm_form.padding = '5'
        frm_form.header = True
        
        hdn_id = ExtHiddenField()
        hdn_id.name = 'id'
        
        str_param_id = ExtStringField()
        str_param_id.read_only = True
        str_param_id.label = u'Идентификатор параметра'
        str_param_id.anchor = '100%'
        
        str_param_name = ExtStringField()
        str_param_name.read_only = False
        str_param_name.label = u'Название'
        str_param_name.anchor = '100%'
        
        cmb_type = ExtComboBox()
        cmb_type.display_field = 'name'
        cmb_type.label = u'Тип'
        cmb_type.editable = False
        cmb_type.anchor = '100%'
        cmb_type.value_field = 'id'
        cmb_type.mode = 'local'
        cmb_type.trigger_action = 'all'
        
        astore_type = ExtDataStore()
        astore_type.store_id = 'newArrayStore'
        astore_type.id_index = 0
        
        cmb_value_type = ExtComboBox()
        cmb_value_type.display_field = 'name'
        cmb_value_type.label = u'Значение'
        cmb_value_type.editable = True
        cmb_value_type.anchor = '100%'
        cmb_value_type.value_field = 'id'
        cmb_value_type.mode = 'local'
        cmb_value_type.trigger_action = 'all'
        cmb_value_type.hidden = False
        
        astore_type_value = ExtDataStore()
        astore_type_value.store_id = 'newArrayStore'
        astore_type_value.id_index = 0
        
        self.footer_bar = tb_buttons
        cmb_type.store = astore_type
        cmb_value_type.store = astore_type_value
        
        tb_buttons.items.extend([btn_ok, btn_cancel])
        frm_form.items.extend([hdn_id, str_param_id, str_param_name, cmb_type, cmb_value_type])
        self.items.extend([frm_form])
        
        self.tb_buttons = tb_buttons
        self.btn_ok = btn_ok
        self.btn_cancel = btn_cancel
        self.frm_form = frm_form
        self.hdn_id = hdn_id
        self.str_param_id = str_param_id
        self.str_param_name = str_param_name
        self.cmb_type = cmb_type
        self.astore_type = astore_type
        self.cmb_value_type = cmb_value_type
        self.astore_type_value = astore_type_value

                                
class ReportForm(ExtWindow):

    def __init__(self, *args, **kwargs):
        super(ReportForm, self).__init__(*args, **kwargs)
        self.initialize()

        self.frm_info.collapse_mode = 'mini'
        self.frm_info.split = True
    
    def initialize(self):
        '''AUTOGENERATED'''
        self.layout = 'border'
        self.height = 300
        self.width = 620
        self.maximizable = True
        self.template_globals = 'rb-report-form.js'
        self.minimizable = True
        
        tb_buttons = ExtToolBar()
        tb_buttons.layout = 'toolbar'
        
        btn_generate = ExtButton()
        btn_generate.text = u'Сформировать'
        btn_generate.handler = 'submitForm'
        
        btn_close = ExtButton()
        btn_close.text = u'Отмена'
        btn_close.handler = 'function(){ win.close ();}'
        
        frm_form = ExtForm()
        frm_form.layout = 'form'
        frm_form.region = 'center'
        frm_form.base_cls = 'x-panel'
        frm_form.padding = '5'
        frm_form.header = True
        frm_form.label_align = 'left'
        
        hdn_report_id = ExtHiddenField()
        hdn_report_id.name = 'report_id'
        
        frm_info = ExtForm()
        frm_info.collapsible = True
        frm_info.layout = 'form'
        frm_info.title = u'Информация о отчете'
        frm_info.region = 'west'
        frm_info.base_cls = 'x-panel'
        frm_info.padding = '5'
        frm_info.header = True
        frm_info.width = 200
        frm_info.label_align = 'top'
        
        self.footer_bar = tb_buttons
        
        tb_buttons.items.extend([btn_generate, btn_close])
        frm_form.items.extend([hdn_report_id])
        self.items.extend([frm_form, frm_info])
        
        self.tb_buttons = tb_buttons
        self.btn_generate = btn_generate
        self.btn_close = btn_close
        self.frm_form = frm_form
        self.hdn_report_id = hdn_report_id
        self.frm_info = frm_info

                                                                                                                                                                                                                                                                                                
class SqlWindow(ExtWindow):

    def __init__(self, *args, **kwargs):
        super(SqlWindow, self).__init__(*args, **kwargs)
        self.initialize()

    def set_source(self, sql):
        self.code_editor.source_code = sql

    def initialize(self):
        '''AUTOGENERATED'''
        self.layout = 'fit'
        self.title = u'SQL представление запроса'
        self.height = 500
        self.width = 500
        
        tb_buttons = ExtToolBar()
        tb_buttons.layout = 'toolbar'
        
        btn_close = ExtButton()
        btn_close.text = u'Закрыть'
        btn_close.handler = 'function(){ win.close();}'
        
        code_editor = ExtCodeEditor()
        code_editor.layout = 'auto'
        code_editor.parser = 'sql'
        code_editor.header = True
        code_editor.source_code = 'SELECT * FROM table1;'
        code_editor.auto_scroll = True
        
        self.footer_bar = tb_buttons
        
        tb_buttons.items.extend([btn_close])
        self.items.extend([code_editor])
        
        self.tb_buttons = tb_buttons
        self.btn_close = btn_close
        self.code_editor = code_editor

                
class ReportData(ExtWindow):

    def __init__(self, params, *args, **kwargs):
        super(ReportData, self).__init__(*args, **kwargs)
        self.initialize()

        grid =  ExtMultiGroupinGrid()
        grid.action_data = params['data_action']
        self.grid = grid
        
        self.items.append(grid)        

    def initialize(self):
        '''AUTOGENERATED'''
        self.layout = 'fit'
        self.height = 500
        self.width = 600
        self.maximizable = True
        self.maximized = True
        self.minimizable = True
        
        tb_buttons = ExtToolBar()
        tb_buttons.layout = 'toolbar'
        
        btn_close = ExtButton()
        btn_close.text = u'Закрыть'
        btn_close.handler = 'function(){ win.close();}'
        
        self.footer_bar = tb_buttons
        
        tb_buttons.items.extend([btn_close])
        
        self.tb_buttons = tb_buttons
        self.btn_close = btn_close

        