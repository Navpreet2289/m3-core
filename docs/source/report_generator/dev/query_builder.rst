.. _dev_query_builder:

Генератор отчетов с точки зрения разработчика прикладных проектов на М3.
========================================================================

.. _description:

Настройки проекта
--------------------------------

Сначала нужно подключить к проекту контриб КЗиО. Для
этого нужно добавить внутрь параметра-словаря ``__require__`` файла
``version.py`` следующую пару "ключ-значение": *'report_generator': 'non-claud'*.

После этого необходимо запустить сценарий ``prepare_env.py``.

Как только сценарий закончит свою работу, следует добавить к параметру-кортежу
``INSTALLED_APPS`` файла ``settings.py`` строки *'report_generator'*,
'*report_generator.query_builder*', '*report_generator.report_builder*'.

Настройки КЗиО следует хранить в словаре *REPORT_GENERATOR_SETTINGS* в файле
``settings.py``. Перечислим настройки:
    1) '*MODELS*' - список имен классов моделей, которые должны присутствовать в КЗиО.
       В случае отсутствия будут использоваться все модели прикладного проекта.

    2) '*EXCLUDE_LIST*' - список имен классов моделей, которые не должны присутствовать в
       КЗиО.

    3) '*ICON_PLACES*' - список расположений иконки для запуска КЗиО (0-DESKTOP, 1-START_MENU,
       2-TOOLBOX, 3-TOPTOOLBAR). Если параметр отсутствует, то иконка будет расположена
       на рабочем столе.

    4) '*TEMPLATE_DIR*' - обязательный параметр. Хранит путь до директории, где сохранены шаблоны

    5) '*REPORT_DIR*' - обязательный параметр. Хранит путь до директории, куда складываются
       сформированные отчеты.

    6) '*OPENOFFICE_SERVER_PORT*' - порт на котором будет запущен сервер OPENOFFICE. Необходимо
       отметить, что на сервере прикладного проекта должен быть установлен сервер OPENOFFICE.

После этого можно приступить к работе с КЗиО. Для формирования отчетов можно воспользоваться кнопкой
"Построить отчет" в интерфейсе конструктора, либо используя API.

Перечислим основные моменты работы с API:

    1) ``report_generator.report_builder.builder.ReportBuilder`` - класс, целью которого является процесс построение
       отчета. Для того, что воспользоваться данным классом, необходимо создать его экземпляр: ::

            builder = ReportBuilder('some_report_key', params, result_format)

       Первым аргументом конструктора является ключ отчета, вторым словарь с параметрами, третьим формат
       файла содержащего отчет. Значения третьего формата можно получить, используя классы
       ``report_generator.report_builder.enums.DocumentResultFileTypes``, для отчетов документов, или
       ``report_generator.report_builder.enums.TableDocumentResultFileTypes``, для отчетов таблиц.
       После того, как получен экземпляр класса ``ReportBuilder``, необходимо вызвать метод ``build``: ::

            builder.build()

       Данный метод возвращает путь до файла с вновь сформированным отчетом.

    2) ``report_generator.api.api.build_report`` - данный метод заключает в себя все действия, который описаны
       в предыдущем пункте. Пример использования: ::

            build_report('some_report_key', result_format, params)

    3) ``report_generator.report_builder.actions.ReportBuilder`` - экшен, который берёт из контекста запроса ключ
       отчета, формат файла с отчетом и словарь с параметрами (Все три параметра обязательны. В случае если
       параметры в отчете отсутствуют, то следует передать пустой словарь) и формирует ответ. Рассмотрим пример
       использования. Допустим в прикладном проекте имеется грид с некоторыми записями и кнопка в верхней панели.
       Необходимо, чтобы при нажатии на кнопку верхней панели всплывало окно с предложением скачать отчет, который
       был подготовлен используя КЗиО. Для этого можно в обработчике кнопки использовать, следующий код: ::

            function someButtonHandler(){
                // Параметры отчета
                var params = []
                params.push('params=' + /*строковое представление параметров*/);
                params.push('report_key=' + /*ключ отчета*/);
                params.push('result_format=' + /*формат файла с отчетом*/);

                open(url + "?" + params.join("&"));
            }


Для запуска сервера OpenOffice необходимо в файл ``manage.py`` прикладного проекта добавить строки: ::

    from oo_report_generator.oo_admin import start_server
    start_server(port=8100, headless_mode=True)

Номер порта, переданного в функцию ``start_server`` должен совпадать с указанным в настройках КЗиО.