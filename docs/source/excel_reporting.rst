:mod:`m3.core.excel_reporting`
===============================

Введение
--------

Основным критерием при создания системы отчетности являлось легкое изменение шаблонов и создание новых шаблонов. Microsoft Excel является форматом де-факто документооборота в России. Из-за своей широкой распространенности Excel'ем умеет пользоваться "всякая бухгалтерша". Так-же Excel можно условно назвать кроссплатформенным, т.к. его могут открывать не только программы работающие на MS Windows. Linux клиенты могут просматривать отчеты например в OpenOffice или IBM Lotus Symphony.

Возможности
-----------

#. Подстановка строк, чисел и дат в ячейки с сохранение форматирования и стиля
#. Подстановка нескольких значений в ячейку
#. Вертикальная развертка строк, в том числе вложенная, с подстановкой значений 
#. Горизонтальная развертка строк с подстановкой значений
#. Проецирование матрицы со значениями на область
#. Поддержка смежных областей, в том числе задание их тегами
#. Поддержка общих строк для каждого листа и авто-высоты для строк
#. Изменения стиля ячейки по условию (пока самое простое)
#. Обработка всех листов в книге
#. Перенос некоторых параметров печати

Принцип работы
--------------

Движок генератора написан на J2SE с использованием библиотеки `Apache POI <http://poi.apache.org/>`_. Более вменяемого и бесплатного средства для работы с Excel на момент разработки не нашлось. Поэтому, при использовании генератора в системе требуется наличие `JRE <http://www.oracle.com/technetwork/java/javase/downloads/index.html>`_ версии не 1.6 и новее. 

Формирование отчета заключается в сборке данных, их сериализации, добавлении дополнительных настроечных параметров и отправке в java-часть генератора. Производится выполнение jar-файла и обмен данными между ним и Python'ом через STDIN/STDOUT и внешние файлы. Настройки не требуется, скомпилированный jar файл и необходимые файлы Apache POI лежат внутри пакета и запускается автоматически.
Исходным материалом является шаблон в формате Excel-97 (xls) со специальными тегами внутри. Этот файл открывается и сериализованные данные расставляются в соответствии с тегами в документе. Далее сохраняется новый файл, шаблон остается неизменным. Пользователю не нужно самому заниматься сериализаций, достаточно предоставить правильно сформированный объект.

Для работы с генератором нужно всего лишь импортировать модуль::
	
	import m3.core.excel_reporting.report_gen
	
Есть 2 фундаментальных метода, с помощью которых работает весь python-код генератора:

.. module:: m3.core.excel_reporting.report_gen

.. autofunction:: make_report_from_object

.. autofunction:: make_report_from_json_string

Базовый класс для отчетов.
--------------------------

Самым удобным способом создания новых отчетов является определение их как классов. В платформе M3 для этого служит класс BaseReport.

.. autoclass:: BaseReport
   :members:

Пример использования::
	
	class TestReport(BaseReport):
	    template_name = "report\\excel\\test.xls" 
	    result_name = "report\\excel\\OUT.xls" 

	    def collect(self):
		result = {}
		# Получаем данные тут
		......
		
		return result

	def test():
	    rep = TestReport()
	    rep.make_report();
	    
Структура объекта данных
------------------------

Структура объекта проектировалась таким образом, чтобы обеспечить максимальную совместимость со штатным движком шаблонов Django и легко использоваться в HTML шаблонах. Он представляет собой словарь, в который в виде значений могут быть вложены другие словари и списки.

Пример структуры объекта::

	{"name": "валюты",
	 "TEMPLATE_FILE_PATH": "d:\\_DEV\\workspace\\JavaReport\\media\\test.xls",
	 "OUTPUT_FILE_PATH": "d:\\_DEV\\workspace\\JavaReport\\media\\OUT.xls",
	
	 "currency": [{
	    "name": "RUB",
	    "value": 1.00},
	    {
	    "name": "USR",
	    "value": 30},
	    {
	    "name": "EUR",
	    "value": 40}],
	
	 "country": [{
	    "name": "Россия",
	    "city": [{
		"name": "Москва",
		"street": [{
		    "name": "Ямская"},
		    {
		    "name": "Тверская"}]},
	
		{
		"name": "Казань",
		"street": [{
		    "name": "Ферма-2"},
		    {
		    "name": "Баумана"}]
		}]
	    },
	
	    {
	    "name": "Америка",
	    "city": [{
		"name": "Вашингтон",
		"street": [{
		    "name": "Валли стрит" 
		    }]
		}]
	    }]
	}

На примере мы видим одиночную таблицу currency, содержащую 3 строки. И 2 вложенных таблицы: street вложена в city, city вложена country.
*TEMPLATE_FILE_PATH* и *OUTPUT_FILE_PATH* - это зарезервированные имена параметров, которые добавляются генератором автоматически. Определяют путь к исходному шаблону и путь к результирующему файлу.

Подстановка значений в ячейки
-----------------------------


