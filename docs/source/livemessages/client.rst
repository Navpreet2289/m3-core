**********************************
Подробное описание клиента
**********************************

Клиентская часть разрабатывалась с такой целью чтобы можно было использовать LiveMessages с разными JavaScript библиотеками.

Пространство имен приложения живых сообщений называется **LiveMessages**.

Общий обзор
===========

**LiveMessages.AjaxWrapper** - Обертка для механизма аякс запросов, мы можем использовать внутри обертки любую библиоткеку для запросов на сервер.

**LiveMessages.Controller** - точка входа приложения, Инициализация всех контроллеров и подписка их на получение данных от сервера через Socket.IO

**LiveMessages.AbstractController** - абстрактный контроллер приложения, в котором есть общие механизмы:

- **ajaxControl** отправка ajax при возникновении события.
- **handler** обработчик получаемого сообщения от сервера.
- **sendDataToView** механизм передачи данных во вьюшки. Передает имя события и аргумент даты. Соответсвенно вьюшка сама решает как реагировать на это событие и обработать данные.
- **afterHandler** вызывается после **handler** и передается туда массив полученных сообщений.

**LiveMessages.ExtBox** - абстрактный класс для миниокон, реализован на ExtJs. имеет общие реализации:

- **handler** обработка передаваемых данных контролером, наличие этого метода обязательна, т.к. она предоставляет API для контроллера!
- **showBox** раскрыть миниокно.
- **hideBox** скрыть миниокно.

Сообщения
=========

**LiveMessages.MessagesController** - клиентский контроллер сообщений

- **init** конструктор класса.
- **hangHandlersOnViewEvents** эта функция класса вызывается единожды и реализует навешивание обработчиков на события вьюшек.
- **messageDelete** обработчик который отправляет на вьюшки информацию об удаленном сообщениии
- **messageRead** обработчик который отправляет на вьюшки информацию о прочитанном сообщении.
- **messageNotReadCount** обработчик который отправляет на вьюшки информацию о количестве непрочитанных сообщений.

Вьюшка сообщений на ExtJS:

**LiveMessages.MessagesUI** - вьюшка для сообщений.

.. note::
    Шаблон представления сообщений подвешен на store, любая манипуляция с записями в store приведет к перерендерингу сообщений.

- **handlerClickTrayButton** единожды вызывается для того чтобы навесить обработчик рскрытия мини окна на кнопку в DOM.
- **initTemplate** единожды вызывается для того чтобы инициализировать шаблон представления.
- **addMessages** добавление сообщений в сторе.
- **messageRead** обработчик сообщения для его прочитывании.
- **messageDelete** обработчик сообщения для его удалении.
- **messageNotReadCount** метод принимающий количество непрочитанных сообщений.

- **messageNotReadInc** Увеличивает число непрочитанных сообщений на 1 ед.
- **messageNotReadDec** Уменьшает число непрочитанных сообщений на 1 ед.

.. note::
    Это нужно для того чтобы при любых манипуляциях с сообщением не делать лишних запросов на сервер.

Задачи
======

**LiveMessages.TaskController** - клиентский котроллер задач.

.. note::
    Чтобы можно было наблюдать за текущим состоянием задач, все задачи добавляются в хранилище store.

- **afterHandler** после обработки полученных задач, задачи добавляются в store и во вьюхи отправляется состояние задач.
- **hangHandlersOnViewEvents** эта функция класса вызывается единожды и реализует навешивание обработчиков на события вьюшек.
- **taskDelete** обработчик который отправляет на вьюшки информацию об удаленной задаче.
- **taskCount** отправляет во вьюхи состояние задач.

**LiveMessages.TasksUI** - вьюшка для задач.

- **initHandlerClickTrayButton** единожды вызывается для того чтобы навесить обработчик рскрытия мини окна на кнопку в DOM.
- **initTaskTemplate** единожды вызывается для того чтобы инициализировать шаблон представления.
- **addTask** добавление задач в сторе UI.
- **newTask** добавляется в сторе как новая задача.
- **taskRefresh** обновляет существующую задачу, конкретно нужно чтобы показать актуальное состояние задачи.
- **taskDelete** получает информацию об удаленной задаче и удаляет ее из сторе.
- **activeTaskCount** проверяет состояние задач, если имеются не завершенный задачи, то показывает пользователю что они есть.